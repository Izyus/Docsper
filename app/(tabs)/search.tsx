import { Dimensions } from 'react-native'
import { useDispatch, useSelector } from 'react-redux'
import {
    Button,
    ScrollView,
    Text,
    XStack,
    YStack
} from 'tamagui'
import TabHeader from '../../components/ui/TabHeader'
import { setCountry } from '../../redux/medicinesSlice'
import { RootState } from '../../redux/store'

const countries = [
    { id: 'ru', name: '–†–æ—Å—Å–∏—è', flag: 'üá∑üá∫' },
    { id: 'kz', name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', flag: 'üá∞üáø' },
    { id: 'by', name: '–ë–µ–ª–∞—Ä—É—Å—å', flag: 'üáßüáæ' },
]

export default function SearchPage() {
    const { width: screenWidth } = Dimensions.get('window')
    const isMobile = screenWidth < 768
    const dispatch = useDispatch()
    const selectedCountry = useSelector((state: RootState) => state.medicines.selectedCountry)

    const renderBasicSearch = () => (
        <YStack space="$4">
            <TabHeader 
                icon="search"
                title="–ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤"
                subtitle="–°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏ –∏ —ç–∫–æ–Ω–æ–º—å—Ç–µ –Ω–∞ –ø–æ–∫—É–ø–∫–∞—Ö"
                accentColor="#007AFF"
                stats={[
                    {
                        value: "50,000+",
                        label: isMobile ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" : "–î–æ–≤–æ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                        color: "#007AFF"
                    },
                    {
                        value: "2,450‚ÇΩ",
                        label: isMobile ? "–≠–∫–æ–Ω–æ–º–∏—è" : "–°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è",
                        color: "#34C759"
                    },
                    {
                        value: "3 —Å—Ç—Ä–∞–Ω—ã",
                        label: isMobile ? "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ" : "–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω",
                        color: "#FF9500"
                    }
                ]}
            />

            {/* üè∑Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏ */}
            <YStack space="$3">
                <Text fontSize={isMobile ? "$4" : "$5"} fontWeight="700" color="#1C1C1E">
                    –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                </Text>
                <XStack flexWrap="wrap" gap="$2">
                    {[
                        '–ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏', '–í–∏—Ç–∞–º–∏–Ω—ã', '–û–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ', 
                        '–ü—Ä–æ—Ç–∏–≤–æ–≤–∏—Ä—É—Å–Ω—ã–µ', '–£—Å–ø–æ–∫–æ–∏—Ç–µ–ª—å–Ω—ã–µ', '–û—Ç –∞–ª–ª–µ—Ä–≥–∏–∏'
                    ].map((tag) => (
                        <Button
                            key={tag}
                            size="$3"
                            backgroundColor="$gray2"
                            pressStyle={{ scale: 0.96 }}
                        >
                            <Text fontSize={isMobile ? "$2" : "$3"} color="#1C1C1E">
                                {tag}
                            </Text>
                        </Button>
                    ))}
                </XStack>
            </YStack>

            {/* üåç –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã */}
            <YStack space="$3">
                <Text fontSize={isMobile ? "$4" : "$5"} fontWeight="700" color="#1C1C1E">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞
                </Text>
                <XStack space="$2">
                    {countries.map((country) => (
                        <Button
                            key={country.id}
                            flex={1}
                            backgroundColor={selectedCountry === country.id ? '#007AFF' : '$gray2'}
                            pressStyle={{ scale: 0.96 }}
                            onPress={() => dispatch(setCountry(country.id))}
                        >
                            <YStack space="$1" alignItems="center">
                                <Text fontSize="$6">{country.flag}</Text>
                                <Text 
                                    fontSize={isMobile ? "$2" : "$3"} 
                                    color={selectedCountry === country.id ? '#fff' : '#1C1C1E'}
                                >
                                    {country.name}
                                </Text>
                            </YStack>
                        </Button>
                    ))}
                </XStack>
            </YStack>
        </YStack>
    )

    const renderProSearch = () => (
        <YStack space="$4">
            <TabHeader 
                icon="medical"
                title="Pro –ø–æ–∏—Å–∫ –¥–ª—è –≤—Ä–∞—á–µ–π"
                subtitle="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"
                accentColor="#FF9500"
                stats={[
                    {
                        value: "15,000+",
                        label: "–ü—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –≤ –±–∞–∑–µ",
                        color: "#FF9500"
                    },
                    {
                        value: "98%",
                        label: "–¢–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
                        color: "#34C759"
                    },
                    {
                        value: "24/7",
                        label: "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ò–ò",
                        color: "#007AFF"
                    }
                ]}
            />

            {/* üî¨ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ */}
            <YStack space="$3">
                <Text fontSize={isMobile ? "$4" : "$5"} fontWeight="700" color="#1C1C1E">
                    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                </Text>
                <XStack flexWrap="wrap" gap="$2">
                    {[
                        '–ú–ù–ù', '–ê–¢–•', '–§–∞—Ä–º–≥—Ä—É–ø–ø–∞', 
                        '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–§–æ—Ä–º–∞ –≤—ã–ø—É—Å–∫–∞', '–î–æ–∑–∏—Ä–æ–≤–∫–∞'
                    ].map((criteria) => (
                        <Button
                            key={criteria}
                            size="$3"
                            backgroundColor="$gray2"
                            pressStyle={{ scale: 0.96 }}
                        >
                            <Text fontSize={isMobile ? "$2" : "$3"} color="#1C1C1E">
                                {criteria}
                            </Text>
                        </Button>
                    ))}
                </XStack>
            </YStack>
        </YStack>
    )

    return (
        <ScrollView backgroundColor="#f8f9fa">
            <YStack px={isMobile ? "$3" : "$4"} py="$4" space="$6">
                {renderBasicSearch()}
                {renderProSearch()}
            </YStack>
        </ScrollView>
    )
}
import { Ionicons } from '@expo/vector-icons'
import React, { useEffect, useRef, useState } from 'react'
import { Dimensions, KeyboardAvoidingView, Modal, Platform } from 'react-native'
import {
    Button,
    Card,
    Input,
    Paragraph,
    ScrollView,
    Spinner,
    Text,
    XStack,
    YStack,
} from 'tamagui'

interface Message {
    id: string
    text: string
    isUser: boolean
    timestamp: Date
    isPro?: boolean
}

interface Props {
    visible: boolean
    onClose: () => void
    proMode?: boolean
}

export default function AIChatModal({ visible, onClose, proMode = false }: Props) {
    const [messages, setMessages] = useState<Message[]>([
        {
            id: '1',
            text: proMode 
                ? '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–∫—Ç–æ—Ä! –Ø –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π, –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –¥–æ–∑–∏—Ä–æ–≤–∫–∞–º–∏ –∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏. –ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'
                : '–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º. –ú–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥–∏, –æ–±—ä—è—Å–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ. –û —á—ë–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?',
            isUser: false,
            timestamp: new Date(),
            isPro: proMode,
        },
    ])
    const [inputText, setInputText] = useState('')
    const [isTyping, setIsTyping] = useState(false)
    const scrollViewRef = useRef<any>(null)
    const { width: screenWidth, height: screenHeight } = Dimensions.get('window')
    const isMobile = screenWidth < 768

    const modalWidth = isMobile ? screenWidth - 32 : 400
    const modalHeight = isMobile ? screenHeight * 0.8 : 500

    useEffect(() => {
        if (scrollViewRef.current) {
            scrollViewRef.current.scrollToEnd({ animated: true })
        }
    }, [messages])

    const sendMessage = async () => {
        if (!inputText.trim()) return

        const userMessage: Message = {
            id: Date.now().toString(),
            text: inputText,
            isUser: true,
            timestamp: new Date(),
        }

        setMessages(prev => [...prev, userMessage])
        setInputText('')
        setIsTyping(true)

        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò —Å —É—á–µ—Ç–æ–º Pro —Ä–µ–∂–∏–º–∞
        setTimeout(() => {
            const basicResponses = [
                '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –ø—Ä–∏—ë–º–æ–º –ª—é–±—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤.',
                '–ü–æ –¥–∞–Ω–Ω–æ–º—É –ª–µ–∫–∞—Ä—Å—Ç–≤—É –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≥—Ä—É–ø–ø–µ –∞–Ω–∞–ª—å–≥–µ—Ç–∏–∫–æ–≤. –í–∞–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∫—É.',
                '–ê–Ω–∞–ª–æ–≥–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—ã—à–µ.',
                '–≠—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–∑—ã–≤—ã, –Ω–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.',
            ]

            const proResponses = [
                '‚ö†Ô∏è –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: –ü—Ä–µ–ø–∞—Ä–∞—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è CYP2D6. –ü—Ä–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å –∏–Ω–≥–∏–±–∏—Ç–æ—Ä–∞–º–∏ —ç—Ç–æ–≥–æ —Ñ–µ—Ä–º–µ–Ω—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ —É—Å–∏–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤ –ø–ª–∞–∑–º–µ.',
                'üìä –§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∞: T¬Ω = 6-8 —á–∞—Å–æ–≤, Cmax –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1-2 —á–∞—Å–∞. –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—á–µ–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–æ–∑—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∫–ª–∏—Ä–µ–Ω—Å—É –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞.',
                'üß¨ –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è: –°–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–≥–∏–±–∏—Ç–æ—Ä –¶–û–ì-2. –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –ø—Ä–∏ —Ç—è–∂–µ–ª–æ–π —Å–µ—Ä–¥–µ—á–Ω–æ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ (–∫–ª–∞—Å—Å III-IV –ø–æ NYHA). –í–æ–∑–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ —Ç—Ä–æ–º–±–æ—ç–º–±–æ–ª–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π.',
                'üíä –î–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–æ–∑–∞ 5 –º–≥/–∫–≥/—Å—É—Ç–∫–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ 2-3 –ø—Ä–∏–µ–º–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É—Ç–æ—á–Ω–∞—è –¥–æ–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 40 –º–≥/–∫–≥. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—á–µ–Ω–∏ –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏ –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü —Ç–µ—Ä–∞–ø–∏–∏.',
                'üìã –õ–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: –£—Å–∏–ª–∏–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤–∞—Ä—Ñ–∞—Ä–∏–Ω–∞ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ú–ù–û), —Å–Ω–∏–∂–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–∏–∞–∑–∏–¥–Ω—ã—Ö –¥–∏—É—Ä–µ—Ç–∏–∫–æ–≤, –ø–æ–≤—ã—à–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –¥–∏–≥–æ–∫—Å–∏–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.',
            ]

            const responses = proMode ? proResponses : basicResponses
            const aiMessage: Message = {
                id: (Date.now() + 1).toString(),
                text: responses[Math.floor(Math.random() * responses.length)],
                isUser: false,
                timestamp: new Date(),
                isPro: proMode,
            }

            setMessages(prev => [...prev, aiMessage])
            setIsTyping(false)
        }, proMode ? 2000 : 1500) // Pro —Ä–µ–∂–∏–º –¥—É–º–∞–µ—Ç –¥–æ–ª—å—à–µ
    }

    const formatTime = (date: Date) => {
        return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
    }

    return (
        <Modal
            visible={visible}
            transparent
            animationType="slide"
            onRequestClose={onClose}
        >
            <YStack flex={1} backgroundColor="rgba(0,0,0,0.5)" justifyContent="flex-end" alignItems="flex-end" p="$4">
                <Card
                    width={modalWidth}
                    height={modalHeight}
                    backgroundColor="#fff"
                    borderRadius="$6"
                    overflow="hidden"
                    borderWidth={1}
                    borderColor={proMode ? "rgba(255, 149, 0, 0.3)" : "$gray6"}
                    shadowColor="$shadowColor"
                    shadowRadius={20}
                    shadowOpacity={0.3}
                >
                    <KeyboardAvoidingView 
                        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
                        style={{ flex: 1 }}
                    >
                        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                        <XStack
                            backgroundColor={proMode ? "#FF9500" : "#007AFF"}
                            padding="$4"
                            alignItems="center"
                            justifyContent="space-between"
                        >
                            <XStack alignItems="center" space="$2">
                                <YStack
                                    width={32}
                                    height={32}
                                    backgroundColor="rgba(255,255,255,0.2)"
                                    borderRadius="$10"
                                    alignItems="center"
                                    justifyContent="center"
                                >
                                    <Ionicons name={proMode ? "medical" : "medical"} size={18} color="#fff" />
                                </YStack>
                                <YStack>
                                    <Text color="#fff" fontWeight="600" fontSize="$4">
                                        {proMode ? '–ò–ò –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Pro' : '–ò–ò –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫'}
                                    </Text>
                                    <Text color="rgba(255,255,255,0.8)" fontSize="$2">
                                        {proMode ? '–î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤' : '–û–Ω–ª–∞–π–Ω'}
                                    </Text>
                                </YStack>
                            </XStack>
                            <Button
                                chromeless
                                onPress={onClose}
                                width={32}
                                height={32}
                                borderRadius="$10"
                                backgroundColor="rgba(255,255,255,0.2)"
                            >
                                <Ionicons name="close" size={18} color="#fff" />
                            </Button>
                        </XStack>

                        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
                        <ScrollView 
                            ref={scrollViewRef}
                            flex={1} 
                            padding="$3" 
                            backgroundColor={proMode ? "#f8f9fa" : "#f8f9fa"}
                            showsVerticalScrollIndicator={false}
                        >
                            <YStack space="$3">
                                {messages.map((message) => (
                                    <XStack
                                        key={message.id}
                                        justifyContent={message.isUser ? 'flex-end' : 'flex-start'}
                                    >
                                        <YStack
                                            maxWidth="80%"
                                            backgroundColor={
                                                message.isUser 
                                                    ? (proMode ? '#FF9500' : '#007AFF')
                                                    : '#fff'
                                            }
                                            padding="$3"
                                            borderRadius="$4"
                                            borderWidth={message.isUser ? 0 : 1}
                                            borderColor="$gray4"
                                        >
                                            <Paragraph
                                                color={message.isUser ? '#fff' : '#333'}
                                                fontSize="$3"
                                                lineHeight="$1"
                                            >
                                                {message.text}
                                            </Paragraph>
                                            <Text
                                                fontSize="$1"
                                                color={message.isUser ? 'rgba(255,255,255,0.7)' : '$gray9'}
                                                alignSelf="flex-end"
                                                mt="$1"
                                            >
                                                {formatTime(message.timestamp)}
                                            </Text>
                                        </YStack>
                                    </XStack>
                                ))}

                                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è */}
                                {isTyping && (
                                    <XStack justifyContent="flex-start">
                                        <YStack
                                            backgroundColor="#fff"
                                            padding="$3"
                                            borderRadius="$4"
                                            borderWidth={1}
                                            borderColor="$gray4"
                                        >
                                            <XStack alignItems="center" space="$2">
                                                <Spinner size="small" color={proMode ? "#FF9500" : "$gray9"} />
                                                <Text color="$gray9" fontSize="$3">
                                                    {proMode ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...' : '–ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç...'}
                                                </Text>
                                            </XStack>
                                        </YStack>
                                    </XStack>
                                )}
                            </YStack>
                        </ScrollView>

                        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
                        <XStack
                            padding="$3"
                            backgroundColor="#fff"
                            borderTopWidth={1}
                            borderTopColor="$gray4"
                            space="$2"
                            alignItems="flex-end"
                        >
                            <Input
                                flex={1}
                                placeholder={proMode ? "–í–≤–µ–¥–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å..." : "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."}
                                value={inputText}
                                onChangeText={setInputText}
                                onSubmitEditing={sendMessage}
                                multiline
                                numberOfLines={3}
                                maxLength={500}
                                fontSize="$3"
                                borderColor="$gray6"
                                borderRadius="$3"
                                backgroundColor="#f8f9fa"
                            />
                            <Button
                                size="$3"
                                backgroundColor={proMode ? "#FF9500" : "#007AFF"}
                                borderRadius="$3"
                                onPress={sendMessage}
                                disabled={!inputText.trim() || isTyping}
                                opacity={(!inputText.trim() || isTyping) ? 0.5 : 1}
                                width={44}
                                height={44}
                            >
                                <Ionicons name="send" size={18} color="#fff" />
                            </Button>
                        </XStack>
                    </KeyboardAvoidingView>
                </Card>
            </YStack>
        </Modal>
    )
} 